{
  "openapi": "3.0.0",
  "x-orn-@id": "https://lazar.prod.openrisknet.org",
  "x-orn-@type": "x-orn:Service",
  "x-orn-@context": {
    "@vocab": "http://openrisknet.org/schema#",
    "x-orn": "http://openrisknet.org/schema#",
    "x-orn-@id": "@id",
    "x-orn-@type": "@type"
  },
  "servers": [
    {
      "url": "https://lazar.prod.openrisknet.org/"
    }
  ],
  "info": {
    "description": "REST API webservice for lazar. \n\n*lazar* (lazy structureâ€“activity relationships) is a modular framework for\npredictive toxicology.",
    "version": "1.4.0",
    "title": "Lazar REST Service",
    "contact": {
      "name": "in silico toxicology gmbh",
      "email": "info@in-silico.ch",
      "url": "https://in-silico.ch"
    },
    "license": {
      "name": "GNU GENERAL PUBLIC LICENSE",
      "url": "https://github.com/opentox/lazar-rest/blob/master/LICENSE"
    }
  },
  "externalDocs": {
    "description": "See also documentation\n",
    "url": "https://github.com/OpenRiskNet/home/blob/master/openshift/deployments/lazar/README.md"
  },
  "paths": {
    "/api/api.json": {
      "get": {
        "tags": [
          "api"
        ],
        "description": "Get swagger api in JSON",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/compound/descriptor": {
      "get": {
        "x-orn-@type": "x-orn:Descriptor",
        "x-orn:path": "https://lazar.prod.openrisknet.org/compound/descriptor",
        "x-orn:method": "Get",
        "x-orn:returns": {
					"Openbabel.HBA1": "Number of Hydrogen Bond Acceptors 1 (JoelLib)",
					"Openbabel.HBA2": "Number of Hydrogen Bond Acceptors 2 (JoelLib)",
					"Openbabel.HBD": "Number of Hydrogen Bond Donors (JoelLib)",
					"Openbabel.MP": "Melting point",
					"Openbabel.MR": "molar refractivity",
					"Openbabel.MW": "Molecular Weight filter",
					"Openbabel.TPSA": "topological polar surface area",
					"Openbabel.abonds": "Number of aromatic bonds",
					"Openbabel.atoms": "Number of atoms",
					"Openbabel.bonds": "Number of bonds",
					"Openbabel.dbonds": "Number of double bonds",
					"Openbabel.logP": "octanol/water partition coefficient",
					"Openbabel.nF": "Number of Fluorine Atoms",
					"Openbabel.rotors": "Rotatable bonds filter",
					"Openbabel.sbonds": "Number of single bonds",
					"Openbabel.tbonds": "Number of triple bonds",
					"Cdk.SmallRing.nSmallRings": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nAromRings": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRingBlocks": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nAromBlocks": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings3": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings4": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings5": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings6": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings7": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings8": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.SmallRing.nRings9": "An enumeration of all the small rings (sizes 3 to 9) in a molecule, which can be obtained quickly and deterministically.",
					"Cdk.FractionalPSA.tpsaEfficiency": "Polar surface area expressed as a ratio to molecular size. Calculates tpsaEfficiency, which is to TPSADescriptor/ molecular weight, in units of square Angstroms per Dalton.",
					"Cdk.ZagrebIndex.Zagreb": "The sum of the squared atom degrees of all heavy atoms.",
					"Cdk.XLogP.XLogP": "Prediction of logP based on the atom-type method called XLogP.",
					"Cdk.WienerNumbers.WPATH": "This class calculates Wiener path number and Wiener polarity number.",
					"Cdk.WienerNumbers.WPOL": "This class calculates Wiener path number and Wiener polarity number.",
					"Cdk.WHIM.Wlambda1.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wlambda2.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wlambda3.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wnu1.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wnu2.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wgamma1.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wgamma2.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Wgamma3.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Weta1.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Weta2.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.Weta3.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.WT.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.WA.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.WV.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.WK.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.WG.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WHIM.WD.unity": "Holistic descriptors described by Todeschini et al .",
					"Cdk.WeightedPath.WTPT-1": "The weighted path (molecular ID) descriptors described by Randic. They characterize molecular branching.",
					"Cdk.WeightedPath.WTPT-2": "The weighted path (molecular ID) descriptors described by Randic. They characterize molecular branching.",
					"Cdk.WeightedPath.WTPT-3": "The weighted path (molecular ID) descriptors described by Randic. They characterize molecular branching.",
					"Cdk.WeightedPath.WTPT-4": "The weighted path (molecular ID) descriptors described by Randic. They characterize molecular branching.",
					"Cdk.WeightedPath.WTPT-5": "The weighted path (molecular ID) descriptors described by Randic. They characterize molecular branching.",
					"Cdk.Weight.MW": "Descriptor based on the weight of atoms of a certain element type. If no element is specified, the returned value is the Molecular Weight",
					"Cdk.VAdjMa.VAdjMat": "Descriptor that calculates the vertex adjacency information of a molecule.",
					"Cdk.VABC.VABC": "Describes the volume of a molecule.",
					"Cdk.TPSA.TopoPSA": "Calculation of topological polar surface area based on fragment contributions .",
					"Cdk.RuleOfFive.LipinskiFailures": "This Class contains a method that returns the number failures of the Lipinski's Rule Of Five.",
					"Cdk.RotatableBondsCount.nRotB": "Descriptor that calculates the number of nonrotatable bonds on a molecule.",
					"Cdk.PetitjeanShapeIndex.topoShape": "The topological and geometric shape indices described Petitjean and Bath et al. respectively. Both measure the anisotropy in a molecule.",
					"Cdk.PetitjeanShapeIndex.geomShape": "The topological and geometric shape indices described Petitjean and Bath et al. respectively. Both measure the anisotropy in a molecule.",
					"Cdk.PetitjeanNumber.PetitjeanNumber": "Descriptor that calculates the Petitjean Number of a molecule.",
					"Cdk.MomentOfInertia.MOMI-X": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MomentOfInertia.MOMI-Y": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MomentOfInertia.MOMI-Z": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MomentOfInertia.MOMI-XY": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MomentOfInertia.MOMI-XZ": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MomentOfInertia.MOMI-YZ": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MomentOfInertia.MOMI-R": "Descriptor that calculates the principal moments of inertia and ratios of the principal moments. Als calculates the radius of gyration.",
					"Cdk.MDE.MDEC-11": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-12": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-13": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-14": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-22": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-23": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-24": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-33": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-34": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEC-44": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEO-11": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEO-12": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEO-22": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEN-11": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEN-12": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEN-13": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEN-22": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEN-23": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MDE.MDEN-33": "Evaluate molecular distance edge descriptors for C, N and O",
					"Cdk.MannholdLogP.MLogP": "Descriptor that calculates the LogP based on a simple equation using the number of carbons and hetero atoms .",
					"Cdk.LongestAliphaticChain.nAtomLAC": "Returns the number of atoms in the longest aliphatic chain",
					"Cdk.LengthOverBreadth.LOBMAX": "Calculates the ratio of length to breadth.",
					"Cdk.LengthOverBreadth.LOBMIN": "Calculates the ratio of length to breadth.",
					"Cdk.LargestPiSystem.nAtomP": "Returns the number of atoms in the largest pi chain",
					"Cdk.LargestChain.nAtomLC": "Returns the number of atoms in the largest chain",
					"Cdk.KierHallSmarts.khs.sLi": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssBe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssBe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssBH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssB": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssB": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sCH3": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dCH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssCH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.tCH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dsCH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaCH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssCH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ddC": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.tsC": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dssC": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aasC": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaaC": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssC": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sNH3": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sNH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssNH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dNH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssNH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaNH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.tN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssNH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dsN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ddsN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aasN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssN": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sOH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dO": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssO": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaO": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sF": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sSiH3": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssSiH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssSiH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssSi": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sPH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssPH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssP": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dsssP": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssssP": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sSH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dS": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssS": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaS": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dssS": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ddssS": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sCl": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sGeH3": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssGeH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssGeH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssGe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sAsH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssAsH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssAs": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssdAs": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssssAs": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sSeH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dSe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssSe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.aaSe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.dssSe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ddssSe": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sBr": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sSnH3": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssSnH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssSnH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssSn": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sI": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sPbH3": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssPbH2": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.sssPbH": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KierHallSmarts.khs.ssssPb": "Counts the number of occurrences of the E-state fragments",
					"Cdk.KappaShapeIndices.Kier1": "Descriptor that calculates Kier and Hall kappa molecular shape indices.",
					"Cdk.KappaShapeIndices.Kier2": "Descriptor that calculates Kier and Hall kappa molecular shape indices.",
					"Cdk.KappaShapeIndices.Kier3": "Descriptor that calculates Kier and Hall kappa molecular shape indices.",
					"Cdk.HybridizationRatio.HybRatio": "Characterizes molecular complexity in terms of carbon hybridization states.",
					"Cdk.HBondDonorCount.nHBDon": "Descriptor that calculates the number of hydrogen bond donors.",
					"Cdk.HBondAcceptorCount.nHBAcc": "Descriptor that calculates the number of hydrogen bond acceptors.",
					"Cdk.GravitationalIndex.GRAV-1": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAV-2": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAV-3": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAVH-1": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAVH-2": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAVH-3": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAV-4": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAV-5": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.GravitationalIndex.GRAV-6": "Descriptor characterizing the mass distribution of the molecule.",
					"Cdk.FragmentComplexity.fragC": "Class that returns the complexity of a system. The complexity is defined as @cdk.cite{Nilakantan06}",
					"Cdk.FMF.FMF": "Descriptor characterizing molecular complexity in terms of its Murcko framework",
					"Cdk.EccentricConnectivityIndex.ECCEN": "A topological descriptor combining distance and adjacency information.",
					"Cdk.CPSA.PPSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.PPSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.PPSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.PNSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.PNSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.PNSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.DPSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.DPSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.DPSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.FPSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.FPSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.FPSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.FNSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.FNSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.FNSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.WPSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.WPSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.WPSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.WNSA-1": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.WNSA-2": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.WNSA-3": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.RPCG": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.RNCG": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.RPCS": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.RNCS": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.THSA": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.TPSA": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.RHSA": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.CPSA.RPSA": "A variety of descriptors combining surface area and partial charge information",
					"Cdk.ChiPath.SP-0": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-1": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-2": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-3": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-4": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-5": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-6": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.SP-7": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-0": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-1": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-2": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-3": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-4": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-5": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-6": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPath.VP-7": "Evaluates the Kier & Hall Chi path indices of orders 0,1,2,3,4,5,6 and 7",
					"Cdk.ChiPathCluster.SPC-4": "Evaluates the Kier & Hall Chi path cluster indices of orders 4,5 and 6",
					"Cdk.ChiPathCluster.SPC-5": "Evaluates the Kier & Hall Chi path cluster indices of orders 4,5 and 6",
					"Cdk.ChiPathCluster.SPC-6": "Evaluates the Kier & Hall Chi path cluster indices of orders 4,5 and 6",
					"Cdk.ChiPathCluster.VPC-4": "Evaluates the Kier & Hall Chi path cluster indices of orders 4,5 and 6",
					"Cdk.ChiPathCluster.VPC-5": "Evaluates the Kier & Hall Chi path cluster indices of orders 4,5 and 6",
					"Cdk.ChiPathCluster.VPC-6": "Evaluates the Kier & Hall Chi path cluster indices of orders 4,5 and 6",
					"Cdk.ChiCluster.SC-3": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.SC-4": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.SC-5": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.SC-6": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.VC-3": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.VC-4": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.VC-5": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiCluster.VC-6": "Evaluates the Kier & Hall Chi cluster indices of orders 3,4,5,6 and 7",
					"Cdk.ChiChain.SCH-3": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.SCH-4": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.SCH-5": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.SCH-6": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.SCH-7": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.VCH-3": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.VCH-4": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.VCH-5": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.VCH-6": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.ChiChain.VCH-7": "Evaluates the Kier & Hall Chi chain indices of orders 3,4,5 and 6",
					"Cdk.CarbonTypes.C1SP1": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C2SP1": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C1SP2": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C2SP2": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C3SP2": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C1SP3": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C2SP3": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C3SP3": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.CarbonTypes.C4SP3": "Characterizes the carbon connectivity in terms of hybridization",
					"Cdk.BPol.bpol": "Descriptor that calculates the sum of the absolute value of the difference between atomic polarizabilities of all bonded atoms in the molecule (including implicit hydrogens).",
					"Cdk.BondCount.nB": "Descriptor based on the number of bonds of a certain bond order.",
					"Cdk.BCUT.BCUTw-1l": "Eigenvalue based descriptor noted for its utility in chemical diversity described by Pearlman et al. .",
					"Cdk.BCUT.BCUTw-1h": "Eigenvalue based descriptor noted for its utility in chemical diversity described by Pearlman et al. .",
					"Cdk.BCUT.BCUTc-1l": "Eigenvalue based descriptor noted for its utility in chemical diversity described by Pearlman et al. .",
					"Cdk.BCUT.BCUTc-1h": "Eigenvalue based descriptor noted for its utility in chemical diversity described by Pearlman et al. .",
					"Cdk.BCUT.BCUTp-1l": "Eigenvalue based descriptor noted for its utility in chemical diversity described by Pearlman et al. .",
					"Cdk.BCUT.BCUTp-1h": "Eigenvalue based descriptor noted for its utility in chemical diversity described by Pearlman et al. .",
					"Cdk.BasicGroupCount.nBase": "Returns the number of basic groups.",
					"Cdk.AutocorrelationPolarizability.ATSp1": "The Moreau-Broto autocorrelation descriptors using polarizability",
					"Cdk.AutocorrelationPolarizability.ATSp2": "The Moreau-Broto autocorrelation descriptors using polarizability",
					"Cdk.AutocorrelationPolarizability.ATSp3": "The Moreau-Broto autocorrelation descriptors using polarizability",
					"Cdk.AutocorrelationPolarizability.ATSp4": "The Moreau-Broto autocorrelation descriptors using polarizability",
					"Cdk.AutocorrelationPolarizability.ATSp5": "The Moreau-Broto autocorrelation descriptors using polarizability",
					"Cdk.AutocorrelationMass.ATSm1": "The Moreau-Broto autocorrelation descriptors using atomic weight",
					"Cdk.AutocorrelationMass.ATSm2": "The Moreau-Broto autocorrelation descriptors using atomic weight",
					"Cdk.AutocorrelationMass.ATSm3": "The Moreau-Broto autocorrelation descriptors using atomic weight",
					"Cdk.AutocorrelationMass.ATSm4": "The Moreau-Broto autocorrelation descriptors using atomic weight",
					"Cdk.AutocorrelationMass.ATSm5": "The Moreau-Broto autocorrelation descriptors using atomic weight",
					"Cdk.AutocorrelationCharge.ATSc1": "The Moreau-Broto autocorrelation descriptors using partial charges",
					"Cdk.AutocorrelationCharge.ATSc2": "The Moreau-Broto autocorrelation descriptors using partial charges",
					"Cdk.AutocorrelationCharge.ATSc3": "The Moreau-Broto autocorrelation descriptors using partial charges",
					"Cdk.AutocorrelationCharge.ATSc4": "The Moreau-Broto autocorrelation descriptors using partial charges",
					"Cdk.AutocorrelationCharge.ATSc5": "The Moreau-Broto autocorrelation descriptors using partial charges",
					"Cdk.AtomCount.nAtom": "Descriptor based on the number of atoms of a certain element type.",
					"Cdk.AromaticBondsCount.nAromBond": "Descriptor based on the number of aromatic bonds of a molecule.",
					"Cdk.AromaticAtomsCount.naAromAtom": "Descriptor based on the number of aromatic atoms of a molecule.",
					"Cdk.APol.apol": "Descriptor that calculates the sum of the atomic polarizabilities (including implicit hydrogens).",
					"Cdk.ALOGP.ALogP": "Calculates atom additive logP and molar refractivity values as described by Ghose and Crippen and",
					"Cdk.ALOGP.ALogp2": "Calculates atom additive logP and molar refractivity values as described by Ghose and Crippen and",
					"Cdk.ALOGP.AMR": "Calculates atom additive logP and molar refractivity values as described by Ghose and Crippen and",
					"Cdk.AcidicGroupCount.nAcid": "Returns the number of acidic groups.",
					"Joelib.FractionRotatableBonds": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.GeometricalDiameter": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.GeometricalRadius": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.GeometricalShapeCoefficient": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.GraphShapeCoefficient": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.KierShape1": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.KierShape2": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.KierShape3": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.LogP": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.MolarRefractivity": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.MolecularWeight": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.PolarSurfaceArea": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.RotatableBonds": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.TopologicalDiameter": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.TopologicalRadius": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.ZagrebIndex1": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.AcidicGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.AliphaticOHGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.AromaticBonds": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.AromaticOHGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.BasicGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HBA1": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HBA2": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HBD1": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HBD2": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HeavyBonds": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HeteroCycles": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.HydrophobicGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NO2Groups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfAtoms": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfB": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfBonds": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfBr": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfC": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfCl": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfF": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfHal": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfI": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfN": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfO": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfP": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.NumberOfS": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.OSOGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.SO2Groups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details.",
					"Joelib.count.SOGroups": "JOELIb does not provide meaningful descriptions, see java/JoelibDescriptors.java for details."
				},
        "tags": [
          "compound",
          "descriptor"
        ],
        "description": "Get a list of all descriptors",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "x-orn-@type": "x-orn:Prediction",
        "x-orn:path": "https://lazar.prod.openrisknet.org/compound/descriptor",
        "x-orn:method": "Post",
        "tags": [
          "compound",
          "descriptor"
        ],
        "summary": "Descriptor calculation",
        "description": "Calculate descriptors for a single compound as SMILES string",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "description": "identifier and descriptor/s",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "x-orn:schema": "application/x-www-form-urlencoded",
              "schema": {
                "$ref": "#/components/schemas/postdescriptor"
              }
            }
          }
        }
      }
    },
    "/compound/descriptor/{descriptor}": {
      "get": {
        "x-orn-@type": "x-orn:Descriptor",
        "x-orn:path": "https://lazar.prod.openrisknet.org/compound/descriptor/{descriptor}",
        "x-orn:method": "Get",
        "tags": [
          "compound",
          "descriptor"
        ],
        "description": "Get informations about a single descriptor",
        "parameters": [
          {
            "name": "descriptor",
            "in": "path",
            "description": "descriptor name or ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/compound/{InChI}": {
      "get": {
        "x-orn-@type": "x-orn:Compound",
        "x-orn:path": "https://lazar.prod.openrisknet.org/compound/{InChI}",
        "x-orn:method": "Get",
        "tags": [
          "compound"
        ],
        "description": "Get compound representation",
        "parameters": [
          {
            "$ref": "#/components/parameters/InChI"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "x-orn:returns": "application/json",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              },
              "chemical/x-daylight-smiles": {
                "x-orn:returns": "chemical/x-daylight-smiles",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              },
              "chemical/x-inchi": {
                "x-orn:returns": "chemical/x-inchi",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              },
              "chemical/x-mdl-sdfile": {
                "x-orn:returns": "chemical/x-mdl-sdfile",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              },
              "image/png": {
                "x-orn:returns": "image/png",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              },
              "image/svg+xml": {
                "x-orn:returns": "image/svg+xml",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              },
              "text/plain": {
                "x-orn:returns": "text/plain",
                "schema": {
                  "x-orn:property": "InChI",
                  "type": "string",
                  "example": "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/dataset": {
      "get": {
        "x-orn-@type": "x-orn:Dataset",
        "x-orn:path": "https://lazar.prod.openrisknet.org/dataset",
        "x-orn:method": "Get",
        "tags": [
          "dataset"
        ],
        "description": "Get a list of all datasets",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/dataset/{id}": {
      "get": {
        "x-orn-@type": "x-orn:Dataset",
        "x-orn:path": "https://lazar.prod.openrisknet.org/dataset/{id}",
        "x-orn:method": "Get",
        "tags": [
          "dataset"
        ],
        "description": "Get dataset representation",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "x-orn:returns": "text/csv"
              },
              "application/csv": {
                "x-orn:returns": "text/csv"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/dataset/{id}/{attribute}": {
      "get": {
        "x-orn-@type": "x-orn:Dataset",
        "x-orn:path": "https://lazar.prod.openrisknet.org/dataset/{id}/{attribute}",
        "x-orn:method": "Get",
        "tags": [
          "dataset"
        ],
        "description": "Get dataset representation",
        "parameters": [
          {
            "name": "attribute",
            "in": "path",
            "description": "requested attribute",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "compounds",
                "substances",
                "features"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/endpoint": {
      "get": {
        "x-orn-@type": "x-orn:Endpoint",
        "x-orn:path": "https://lazar.prod.openrisknet.org/endpoint",
        "x-orn:method": "Get",
        "tags": [
          "endpoint"
        ],
        "description": "Get a list of all available endpoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/endpoint/{endpoint}": {
      "get": {
        "x-orn-@type": "x-orn:Endpoint",
        "x-orn:path": "https://lazar.prod.openrisknet.org/endpoint",
        "x-orn:method": "Get",
        "tags": [
          "endpoint"
        ],
        "description": "Get a list of all available models for an endpoint",
        "parameters": [
          {
            "$ref": "#/components/parameters/endpoint"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature": {
      "get": {
        "x-orn-@type": "x-orn:Feature",
        "x-orn:path": "https://lazar.prod.openrisknet.org/feature",
        "x-orn:method": "Get",
        "tags": [
          "feature"
        ],
        "description": "Get a list of ids for all features",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature/{id}": {
      "get": {
        "x-orn-@type": "x-orn:Feature",
        "x-orn:path": "https://lazar.prod.openrisknet.org/feature/{id}",
        "x-orn:method": "Get",
        "tags": [
          "feature"
        ],
        "description": "Get feature representation",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/model": {
      "get": {
        "x-orn-@type": "x-orn:Model",
        "x-orn:path": "https://lazar.prod.openrisknet.org/model",
        "x-orn:method": "Get",
        "tags": [
          "model"
        ],
        "description": "Get a list of all prediction models",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/model/{id}": {
      "get": {
        "x-orn-@type": "x-orn:Model",
        "x-orn:path": "https://lazar.prod.openrisknet.org/model",
        "x-orn:method": "Get",
        "tags": [
          "model"
        ],
        "description": "Get model representation",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "x-orn-@type": "x-orn:Prediction",
        "x-orn:path": "https://lazar.prod.openrisknet.org/model/{id}",
        "x-orn:method": "Post",
        "tags": [
          "model"
        ],
        "description": "Predict a compound.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "requestBody": {
          "description": "SMILES identifier.\n",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "x-orn:schema": "application/x-www-form-urlencoded",
              "schema": {
                "$ref": "#/components/schemas/postmodel"
              }
            }
          }
        }
      }
    },
    "/report": {
      "get": {
        "x-orn-@type": "x-orn:Report",
        "x-orn:path": "https://lazar.prod.openrisknet.org/report",
        "x-orn:method": "Get",
        "tags": [
          "report"
        ],
        "description": "Get a list of QMRF reports",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/report/{id}": {
      "get": {
        "x-orn-@type": "x-orn:Report",
        "x-orn:path": "https://lazar.prod.openrisknet.org/report/{id}",
        "x-orn:method": "Get",
        "tags": [
          "report"
        ],
        "description": "Get QMRF for prediction model",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/substance": {
      "get": {
        "x-orn-@type": "x-orn:Substance",
        "x-orn:path": "https://lazar.prod.openrisknet.org/substance",
        "x-orn:method": "Get",
        "tags": [
          "substance"
        ],
        "description": "Get a list of all substances",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/substance/{id}": {
      "get": {
        "x-orn-@type": "x-orn:Substance",
        "x-orn:path": "https://lazar.prod.openrisknet.org/substance/{id}",
        "x-orn:method": "Get",
        "tags": [
          "substance"
        ],
        "description": "Get substance representation by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/validation": {
      "get": {
        "x-orn-@type": "x-orn:Validation",
        "x-orn:path": "https://lazar.prod.openrisknet.org/validation",
        "x-orn:method": "Get",
        "tags": [
          "validation"
        ],
        "description": "Get a list of all validation types",
        "parameters": [
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/validation/{validationtype}": {
      "get": {
        "x-orn-@type": "x-orn:Validation",
        "x-orn:path": "https://lazar.prod.openrisknet.org/validation/{validationtype}",
        "x-orn:method": "Get",
        "tags": [
          "validation"
        ],
        "description": "Get all validations of a validation type",
        "parameters": [
          {
            "$ref": "#/components/parameters/valtype"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/validation/{validationtype}/{id}": {
      "get": {
        "x-orn-@type": "x-orn:Validation",
        "x-orn:path": "https://lazar.prod.openrisknet.org/validation/{validationtype}/{id}",
        "x-orn:method": "Get",
        "tags": [
          "validation"
        ],
        "description": "Get validation representation",
        "parameters": [
          {
            "$ref": "#/components/parameters/valtype"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/subjectid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "api",
      "description": "Swagger API representation in JSON"
    },
    {
      "name": "compound",
      "description": "Compound"
    },
    {
      "name": "dataset",
      "description": "Dataset"
    },
    {
      "name": "descriptor",
      "description": "Descriptor"
    },
    {
      "name": "endpoint",
      "description": "Endpoint"
    },
    {
      "name": "feature",
      "description": "Feature"
    },
    {
      "name": "model",
      "description": "Lazar Model Service"
    },
    {
      "name": "report",
      "description": "QMRF Reporting"
    },
    {
      "name": "substance",
      "description": "Substance"
    },
    {
      "name": "validation",
      "description": "Validation"
    }
  ],
  "components": {
    "schemas": {
      "postmodel": {
        "type": "object",
        "properties": {
          "identifier": {
            "x-orn:property": "identifier",
            "type": "string",
            "example": "O=C1NC(=O)NC=C1"
          }
        }
      },
      "postdescriptor": {
        "type": "object",
        "properties": {
          "identifier": {
            "x-orn:property": "identifier",
            "type": "string",
            "example": "O=C1NC(=O)NC=C1"
          },
          "descriptor": {
            "x-orn:property": "descriptor",
            "type": "string",
            "example": "Openbabel.MW,Openbabel.atoms"
          }
        }
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "description": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "endpoint": {
        "name": "endpoint",
        "in": "path",
        "description": "type",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "InChI": {
        "name": "InChI",
        "in": "path",
        "description": "InChI String",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "valtype": {
        "name": "validationtype",
        "in": "path",
        "description": "validation type",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "crossvalidation",
            "leaveoneout",
            "repeatedcrossvalidation",
            "regressioncrossvalidation"
          ]
        }
      },
      "subjectid": {
        "in": "header",
        "name": "subjectid",
        "description": "authorization token",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "200": {
        "description": "OK",
        "content": {
          "application/json": {
            "x-orn:returns": "application/json",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "201": {
        "description": "Created",
        "content": {
          "application/json": {
            "x-orn:returns": "application/json",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "202": {
        "description": "Accepted",
        "content": {
          "application/json": {
            "x-orn:returns": "application/json",
            "schema": {
              "type": "object"
            }
          },
          "text/plain": {
            "x-orn:returns": "text/uri-list",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "400": {
        "description": "Bad Request"
      },
      "401": {
        "description": "Unauthorized"
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "description": "Resource Not Found"
      },
      "500": {
        "description": "Server Error"
      }
    }
  }
}
