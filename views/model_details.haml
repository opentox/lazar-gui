%div.card.bg-light
  %div.card-body
    %h6.card-title Model:
    Source:
    %a{:href=>model.source, :rel=>"external"}
      = model.source
    %br
    - model.classification? ? type = "Classification" : type = "Regression"
    = "Type:\t"
    = type
    %br
    - training_dataset = OpenTox::Dataset.find model.model.training_dataset_id
    = "Training compounds:\t"
    = training_dataset.data_entries.size
    %br
    = "Training dataset:\t"
    %a{:href=>"#{to("/predict/dataset/#{training_dataset.name}")}"}
      = training_dataset.name

%div.card.bg-light
  %div.card-body
    %h6.card-title Algorithms:
    Similarity:
    %a{:href=> "http://www.rubydoc.info/gems/lazar/OpenTox%2F#{model.model.algorithms["similarity"]["method"].sub("::", "%2F")}", :rel=>"external"}
      = model.model.algorithms["similarity"]["method"]
    = ", min: #{model.model.algorithms["similarity"]["min"]}"
    %br
    Prediction:
    - if model.model.algorithms["prediction"]["method"] !~ /Caret/
      %a{:href=>"http://www.rubydoc.info/gems/lazar/OpenTox%2F#{model.model.algorithms["prediction"]["method"].sub("::","%2f")}", :rel=>"external"}
        = model.model.algorithms["prediction"]["method"]
    - else
      %a{:href=>"http://www.rubydoc.info/gems/lazar/OpenTox/Algorithm/Caret", :rel=>"external"}
        = model.model.algorithms["prediction"]["method"]

    %br
    Descriptors:
    = model.model.algorithms["descriptors"]["method"]+","
    = model.model.algorithms["descriptors"]["type"]

%div.card.bg-light
  %div.card-body
    - if type == "Classification"
      %h6.card-title Independent crossvalidations:
    - else
      %h6.card-title Independent crossvalidations (-log10 transformed):
    %div.row{:id=>"validations#{model.id}"}
      - crossvalidations.each do |cv|
        %span.col-4
          = "Num folds:\t"
          = cv.folds
          %br
          = "Num instances:\t"
          = cv.nr_instances
          %br
          = "Num unpredicted"
          = cv.nr_unpredicted
          - if model.classification? 
            %br
            = "Accuracy:\t"
            = cv.accuracy.round(3) if cv.accuracy
            %br
            = "Weighted accuracy:\t"
            = cv.weighted_accuracy.round(3) if cv.weighted_accuracy
            - if cv.true_rate
              %br
              = "True positive rate:\t"
              = cv.true_rate[cv.accept_values[0]].round(3)
              %br
              = "True negative rate:\t"
              = cv.true_rate[cv.accept_values[1]].round(3)
            - if cv.predictivity
              %br 
              = "Positive predictive value:\t"
              = cv.predictivity[cv.accept_values[0]].round(3)
              %br
              = "Negative predictive value:\t"
              = cv.predictivity[cv.accept_values[1]].round(3)
            %p
            - ["confusion_matrix", "weighted_confusion_matrix"].each_with_index do |matrix,idx|
              %b= (idx == 0 ? "Confusion Matrix" : "Weighted Confusion Matrix")
              %div.table-responsive
                %table.table.table-sm.table-borderless
                  %tbody
                    %tr
                      %td
                      %td
                      %td 
                        %b actual
                      %td
                      %td
                    %tr
                      %td
                      %td
                      %td active
                      %td inactive
                      -#%td total
                    %tr
                      %td 
                        %b predicted
                      %td active
                      %td 
                        =( idx == 1 ? cv.send(matrix)[0][0].round(3) : cv.send(matrix)[0][0])
                      %td 
                        =( idx == 1 ? cv.send(matrix)[0][1].round(3) : cv.send(matrix)[0][1])
                      -#%td 
                        =cv.confusion_matrix[0][0]+cv.confusion_matrix[0][1]
                    %tr
                      %td
                      %td inactive
                      %td 
                        =( idx == 1 ? cv.send(matrix)[1][0].round(3) : cv.send(matrix)[1][0])
                      %td 
                        =( idx == 1 ? cv.send(matrix)[1][1].round(3) : cv.send(matrix)[1][1])
                      -#%td 
                        =cv.confusion_matrix[1][0]+cv.confusion_matrix[1][1]
                    -#%tr
                      %td
                      %td total
                      %td
                        =cv.confusion_matrix[0][0]+cv.confusion_matrix[1][0]
                      %td
                        =cv.confusion_matrix[0][1]+cv.confusion_matrix[1][1]
                      %td
                        -#= "Confusion Matrix:\t"
                        -#= cv.confusion_matrix
                    %br
            %br
            /= "Confidence plot:"
            /%p.plot
            /  %img{:src=>"confp#{cv.id}.svg"}
          - if model.regression?
            %br
            %a{:href=>"https://en.wikipedia.org/wiki/Root-mean-square_deviation", :rel=>"external"} RMSE:
            = cv.rmse.round(3) if cv.rmse
            %br
            %a{:href=>"https://en.wikipedia.org/wiki/Mean_absolute_error", :rel=>"external"} MAE:
            = cv.mae.round(3) if cv.mae
            %br 
            %a{:href=>"https://en.wikipedia.org/wiki/Coefficient_of_determination", :rel=>"external"}= "R"+"<sup>2</sup>"+":"
            = cv.r_squared.round(3) if cv.r_squared
            %br
            /= "Confidence plot:"
            /%p.plot
            /  %img{:src=>"/confp#{cv.id}.svg"}
            /%br
            /= "Correlation plot"
            /%p.plot
            /  %img{:src=>"/corrp#{cv.id}.svg"}
          
%div.card.bg-light
  %div.card-body
    %h6.card-title QMRF:
    %a.btn.btn-outline-info{:href=>"#{to("/report/#{model.id}")}", :id=>"report#{model.id}", :style=>"font-size:small;"}
      %span.fa.fa-download
      XML
%br
